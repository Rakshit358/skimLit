{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30512,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!git clone https://github.com/Franck-Dernoncourt/pubmed-rct.git","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-15T17:46:02.901448Z","iopub.execute_input":"2024-08-15T17:46:02.901747Z","iopub.status.idle":"2024-08-15T17:46:10.646984Z","shell.execute_reply.started":"2024-08-15T17:46:02.901721Z","shell.execute_reply":"2024-08-15T17:46:10.645982Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Cloning into 'pubmed-rct'...\nremote: Enumerating objects: 39, done.\u001b[K\nremote: Counting objects: 100% (14/14), done.\u001b[K\nremote: Compressing objects: 100% (9/9), done.\u001b[K\nremote: Total 39 (delta 8), reused 5 (delta 5), pack-reused 25 (from 1)\u001b[K\nReceiving objects: 100% (39/39), 177.08 MiB | 43.48 MiB/s, done.\nResolving deltas: 100% (15/15), done.\n","output_type":"stream"}]},{"cell_type":"code","source":"import zipfile\nimport io","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:10.648981Z","iopub.execute_input":"2024-08-15T17:46:10.649313Z","iopub.status.idle":"2024-08-15T17:46:10.653866Z","shell.execute_reply.started":"2024-08-15T17:46:10.649277Z","shell.execute_reply":"2024-08-15T17:46:10.652913Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"zip_path = \"/kaggle/working/pubmed-rct/PubMed_200k_RCT_numbers_replaced_with_at_sign/train.zip\"\nzip_ref = zipfile.ZipFile(zip_path)\nzip_ref.extractall(\"pubmed-rct/PubMed_200k_RCT_numbers_replaced_with_at_sign\")\nzip_ref.close()","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:10.654889Z","iopub.execute_input":"2024-08-15T17:46:10.655148Z","iopub.status.idle":"2024-08-15T17:46:12.636073Z","shell.execute_reply.started":"2024-08-15T17:46:10.655124Z","shell.execute_reply":"2024-08-15T17:46:12.635079Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train_path = \"/kaggle/working/pubmed-rct/PubMed_20k_RCT_numbers_replaced_with_at_sign/train.txt\"\nvalid_path = \"/kaggle/working/pubmed-rct/PubMed_20k_RCT_numbers_replaced_with_at_sign/dev.txt\"\ntest_path = \"/kaggle/working/pubmed-rct/PubMed_20k_RCT_numbers_replaced_with_at_sign/test.txt\"","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:12.638611Z","iopub.execute_input":"2024-08-15T17:46:12.638888Z","iopub.status.idle":"2024-08-15T17:46:12.644411Z","shell.execute_reply.started":"2024-08-15T17:46:12.638864Z","shell.execute_reply":"2024-08-15T17:46:12.643529Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\ndef read_data(data_path):\n    datas = open(data_path, 'r')\n    datas = datas.readlines()\n    datas = list(filter(lambda data: data!='\\n', datas))\n\n    data_title_index = []\n    data_processed = []\n    line_number = 0\n    total_lines_index = 0\n\n    for index, data in enumerate(datas):\n        if(not('\\t' in data)):\n            data_title_index.append(index)\n    data_title_index.append(len(datas))\n\n    for index, data in enumerate(datas):\n        if index == data_title_index[total_lines_index]:\n            total_lines_index+=1\n            line_number = 0\n            continue\n\n        target = data.split('\\t')[0]\n        text = data.split('\\t')[1].split('\\n')[0]\n        total_lines = data_title_index[total_lines_index] - data_title_index[total_lines_index-1] - 1\n        data_processed.append({\n            'target':target,\n            'text': text,\n            'line_number': line_number,\n            'total_lines': total_lines\n        })\n\n        line_number+=1\n\n    return pd.DataFrame(data_processed)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:12.645503Z","iopub.execute_input":"2024-08-15T17:46:12.645762Z","iopub.status.idle":"2024-08-15T17:46:12.658384Z","shell.execute_reply.started":"2024-08-15T17:46:12.645740Z","shell.execute_reply":"2024-08-15T17:46:12.657480Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"train_data_df = read_data(train_path)\nvalid_data_df = read_data(valid_path)\ntest_data_df = read_data(test_path)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:12.659599Z","iopub.execute_input":"2024-08-15T17:46:12.659919Z","iopub.status.idle":"2024-08-15T17:46:13.788009Z","shell.execute_reply.started":"2024-08-15T17:46:12.659890Z","shell.execute_reply":"2024-08-15T17:46:13.787239Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"pd.DataFrame(train_data_df)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:13.789082Z","iopub.execute_input":"2024-08-15T17:46:13.789377Z","iopub.status.idle":"2024-08-15T17:46:13.810448Z","shell.execute_reply.started":"2024-08-15T17:46:13.789352Z","shell.execute_reply":"2024-08-15T17:46:13.809499Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"             target                                               text  \\\n0         OBJECTIVE  To investigate the efficacy of @ weeks of dail...   \n1           METHODS  A total of @ patients with primary knee OA wer...   \n2           METHODS  Outcome measures included pain reduction and i...   \n3           METHODS  Pain was assessed using the visual analog pain...   \n4           METHODS  Secondary outcome measures included the Wester...   \n...             ...                                                ...   \n180035      RESULTS  For the absolute change in percent atheroma vo...   \n180036      RESULTS  For PAV , a significantly greater percentage o...   \n180037      RESULTS  Both strategies had acceptable side effect pro...   \n180038  CONCLUSIONS  Compared with standard statin monotherapy , th...   \n180039  CONCLUSIONS  ( Plaque Regression With Cholesterol Absorptio...   \n\n        line_number  total_lines  \n0                 0           12  \n1                 1           12  \n2                 2           12  \n3                 3           12  \n4                 4           12  \n...             ...          ...  \n180035            7           12  \n180036            8           12  \n180037            9           12  \n180038           10           12  \n180039           11           12  \n\n[180040 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>target</th>\n      <th>text</th>\n      <th>line_number</th>\n      <th>total_lines</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>OBJECTIVE</td>\n      <td>To investigate the efficacy of @ weeks of dail...</td>\n      <td>0</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>METHODS</td>\n      <td>A total of @ patients with primary knee OA wer...</td>\n      <td>1</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>METHODS</td>\n      <td>Outcome measures included pain reduction and i...</td>\n      <td>2</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>METHODS</td>\n      <td>Pain was assessed using the visual analog pain...</td>\n      <td>3</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>METHODS</td>\n      <td>Secondary outcome measures included the Wester...</td>\n      <td>4</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>180035</th>\n      <td>RESULTS</td>\n      <td>For the absolute change in percent atheroma vo...</td>\n      <td>7</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>180036</th>\n      <td>RESULTS</td>\n      <td>For PAV , a significantly greater percentage o...</td>\n      <td>8</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>180037</th>\n      <td>RESULTS</td>\n      <td>Both strategies had acceptable side effect pro...</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>180038</th>\n      <td>CONCLUSIONS</td>\n      <td>Compared with standard statin monotherapy , th...</td>\n      <td>10</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>180039</th>\n      <td>CONCLUSIONS</td>\n      <td>( Plaque Regression With Cholesterol Absorptio...</td>\n      <td>11</td>\n      <td>12</td>\n    </tr>\n  </tbody>\n</table>\n<p>180040 rows Ã— 4 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import f1_score, accuracy_score\nfrom sklearn.preprocessing import OneHotEncoder,LabelEncoder\nfrom sklearn.pipeline import Pipeline\nimport numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:13.811733Z","iopub.execute_input":"2024-08-15T17:46:13.812097Z","iopub.status.idle":"2024-08-15T17:46:14.486324Z","shell.execute_reply.started":"2024-08-15T17:46:13.812063Z","shell.execute_reply":"2024-08-15T17:46:14.485509Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"train_data = pd.DataFrame(train_data_df)\ntrain_text = train_data['text'].to_list()\ntrain_label = train_data['target'].to_list()\n\nvalid_data = pd.DataFrame(valid_data_df)\nvalid_text = valid_data['text'].to_list()\nvalid_label = valid_data['target'].to_list()\n\ntest_data = pd.DataFrame(test_data_df)\ntest_text = test_data['text'].to_list()\ntest_label = test_data['target'].to_list()","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:14.487400Z","iopub.execute_input":"2024-08-15T17:46:14.487679Z","iopub.status.idle":"2024-08-15T17:46:14.508588Z","shell.execute_reply.started":"2024-08-15T17:46:14.487655Z","shell.execute_reply":"2024-08-15T17:46:14.507610Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"encoder = LabelEncoder()\n\ntrain_label_transformed = encoder.fit_transform(np.array(train_label).reshape(-1,1))\nvalid_label_transformed = encoder.transform(np.array(valid_label).reshape(-1,1))\ntest_label_transformed = encoder.transform(np.array(test_label).reshape(-1,1))","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:14.513055Z","iopub.execute_input":"2024-08-15T17:46:14.513334Z","iopub.status.idle":"2024-08-15T17:46:14.696324Z","shell.execute_reply.started":"2024-08-15T17:46:14.513311Z","shell.execute_reply":"2024-08-15T17:46:14.695369Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_label.py:116: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n  y = column_or_1d(y, warn=True)\n/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_label.py:134: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n  y = column_or_1d(y, dtype=self.classes_.dtype, warn=True)\n/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_label.py:134: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n  y = column_or_1d(y, dtype=self.classes_.dtype, warn=True)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Model 0 (base Model)\nDatasets are trained using Scikitlearn's model: Multinomial Naive Bayes. The result is set to be the baseline to beat.","metadata":{}},{"cell_type":"code","source":"model_0 = Pipeline([\n    ('tf_idf', TfidfVectorizer()),\n    ('multi_nb', MultinomialNB())\n])\n\nmodel_0.fit(train_text, train_label_transformed)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:14.697972Z","iopub.execute_input":"2024-08-15T17:46:14.698356Z","iopub.status.idle":"2024-08-15T17:46:19.688661Z","shell.execute_reply.started":"2024-08-15T17:46:14.698322Z","shell.execute_reply":"2024-08-15T17:46:19.687679Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('tf_idf', TfidfVectorizer()), ('multi_nb', MultinomialNB())])","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;tf_idf&#x27;, TfidfVectorizer()), (&#x27;multi_nb&#x27;, MultinomialNB())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;tf_idf&#x27;, TfidfVectorizer()), (&#x27;multi_nb&#x27;, MultinomialNB())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">TfidfVectorizer</label><div class=\"sk-toggleable__content\"><pre>TfidfVectorizer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultinomialNB</label><div class=\"sk-toggleable__content\"><pre>MultinomialNB()</pre></div></div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"pred = model_0.predict(valid_text)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:19.689739Z","iopub.execute_input":"2024-08-15T17:46:19.690000Z","iopub.status.idle":"2024-08-15T17:46:20.501130Z","shell.execute_reply.started":"2024-08-15T17:46:19.689977Z","shell.execute_reply":"2024-08-15T17:46:20.500376Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"def get_score(y_true, y_pred):\n  f1 = f1_score(y_true, y_pred, average='weighted')\n  accuracy = accuracy_score(y_true, y_pred)\n\n  print(f\"f1 score: {f1}\")\n  print(f\"accuracy score: {accuracy}\")\n\n  return","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:20.502208Z","iopub.execute_input":"2024-08-15T17:46:20.502487Z","iopub.status.idle":"2024-08-15T17:46:20.507516Z","shell.execute_reply.started":"2024-08-15T17:46:20.502463Z","shell.execute_reply":"2024-08-15T17:46:20.506606Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"get_score(valid_label_transformed, pred)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:20.508599Z","iopub.execute_input":"2024-08-15T17:46:20.508830Z","iopub.status.idle":"2024-08-15T17:46:20.533775Z","shell.execute_reply.started":"2024-08-15T17:46:20.508809Z","shell.execute_reply":"2024-08-15T17:46:20.532911Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"f1 score: 0.6989250353450294\naccuracy score: 0.7218323844829869\n","output_type":"stream"}]},{"cell_type":"code","source":"import tensorflow as tf\nimport tensorflow_hub as hub\nimport tensorflow.keras as keras\nimport tensorflow.keras.layers as layers","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:20.534931Z","iopub.execute_input":"2024-08-15T17:46:20.535235Z","iopub.status.idle":"2024-08-15T17:46:29.483773Z","shell.execute_reply.started":"2024-08-15T17:46:20.535181Z","shell.execute_reply":"2024-08-15T17:46:29.482763Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/__init__.py:98: UserWarning: unable to load libtensorflow_io_plugins.so: unable to open file: libtensorflow_io_plugins.so, from paths: ['/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/libtensorflow_io_plugins.so']\ncaused by: ['/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/libtensorflow_io_plugins.so: undefined symbol: _ZN3tsl6StatusC1EN10tensorflow5error4CodeESt17basic_string_viewIcSt11char_traitsIcEENS_14SourceLocationE']\n  warnings.warn(f\"unable to load libtensorflow_io_plugins.so: {e}\")\n/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/__init__.py:104: UserWarning: file system plugins are not loaded: unable to open file: libtensorflow_io.so, from paths: ['/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/libtensorflow_io.so']\ncaused by: ['/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/libtensorflow_io.so: undefined symbol: _ZTVN10tensorflow13GcsFileSystemE']\n  warnings.warn(f\"file system plugins are not loaded: {e}\")\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Model 1: Convolutional Neural Network 1D\nFirst, the input text is **word vectorized**. Embedding layers create tensors of size **(None, LEN_OF_TEXT, EMBEDDING_DIM)**. Using 1D-CNN, these tensors can be further processed to find similarity between datas, resulting in **(None, LEN_OF_TEXT, NUM_FILTERS)** tensors. \n\nTraining this model leads to a **better result** compared to the baseline model.","metadata":{}},{"cell_type":"code","source":"train_len_text = pd.DataFrame({'len': list(map(lambda data: len(data.split(' ')), train_text))})\ntrain_len_text.plot.hist();\n\nprint(f\"Average word length: {train_len_text.sum()/len(train_len_text)}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:29.484923Z","iopub.execute_input":"2024-08-15T17:46:29.485527Z","iopub.status.idle":"2024-08-15T17:46:30.239316Z","shell.execute_reply.started":"2024-08-15T17:46:29.485500Z","shell.execute_reply":"2024-08-15T17:46:30.238329Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Average word length: len    26.338269\ndtype: float64\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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yo+99tprys7O1qOPPqqqqir96Ec/0u233666urrubq1HuPHGG9XY2Gg+du3aZW5bsmSJ8vPzVVBQoIqKCjmdTo0bN06HDx/uxo4vraNHj+qmm25SQUHBabefzxxlZ2erqKhIhYWFKisr05EjR5Samqr29vZLtRuXzLnmS5ImTJjgc8xt2LDBZ/uVNF9bt27V7NmzVV5ertLSUp04cUIpKSk6evSoWcMx9n/OZ74kjrG/169fPy1atEg7duzQjh07dNttt+knP/mJGZ667fgy4Ld++MMfGg888IDP2He/+13jkUce6aaOeo7HHnvMuOmmm067raOjw3A6ncaiRYvMsa+++spwOBzGs88+e4k67FkkGUVFRebz85mjQ4cOGUFBQUZhYaFZ8/nnnxtXXXWVUVxcfMl67w6nzpdhGMb06dONn/zkJ2d8zZU8X4ZhGM3NzYYkY+vWrYZhcIydy6nzZRgcY+cjMjLS+P3vf9+txxcrVn7K6/WqsrJSKSkpPuMpKSnatm1bN3XVs3z88cdyuVyKi4vTPffco08//VSSVFtbq6amJp+5s9vtGjlyJHP3/53PHFVWVqqtrc2nxuVyKSEh4Yqdx7feekvR0dEaOHCgMjMz1dzcbG670ufL7XZLkq655hpJHGPncup8ncQxdnrt7e0qLCzU0aNHlZyc3K3HF8HKT/3tb39Te3t7px9/jomJ6fQj0VeipKQkvfTSS3rjjTf0/PPPq6mpScOHD9cXX3xhzg9zd2bnM0dNTU0KDg5WZGTkGWuuJLfffrvWrFmjzZs368knn1RFRYVuu+02eTweSVf2fBmGoblz5+rWW29VQkKCJI6xszndfEkcY6eza9cufetb35LdbtcDDzygoqIixcfHd+vxxU/a+Dmbzebz3DCMTmNXottvv93895AhQ5ScnKzvfOc7evHFF82LPZm7c+vKHF2p8zhlyhTz3wkJCRo6dKj69++v9evX6+677z7j666E+XrwwQf1/vvvq6ysrNM2jrHOzjRfHGOdDRo0SNXV1Tp06JDWrl2r6dOna+vWreb27ji+WLHyU1FRUQoICOiUqpubmzsldEhhYWEaMmSIPv74Y/PbgczdmZ3PHDmdTnm9XrW0tJyx5krWt29f9e/fXx9//LGkK3e+5syZo9dff11btmxRv379zHGOsdM703ydDseYFBwcrBtuuEFDhw5VXl6ebrrpJv3mN7/p1uOLYOWngoODlZiYqNLSUp/x0tJSDR8+vJu66rk8Ho/27Nmjvn37Ki4uTk6n02fuvF6vtm7dytz9f+czR4mJiQoKCvKpaWxsVE1NDfMo6YsvvlB9fb369u0r6cqbL8Mw9OCDD2rdunXavHmz4uLifLZzjPk613ydzpV+jJ2OYRjyeDzde3x1+bJ3dLvCwkIjKCjIeOGFF4wPPvjAyM7ONsLCwozPPvusu1vrdjk5OcZbb71lfPrpp0Z5ebmRmppqhIeHm3OzaNEiw+FwGOvWrTN27dpl/PSnPzX69u1rtLa2dnPnl87hw4eNqqoqo6qqypBk5OfnG1VVVca+ffsMwzi/OXrggQeMfv36GW+++aaxc+dO47bbbjNuuukm48SJE921WxfN2ebr8OHDRk5OjrFt2zajtrbW2LJli5GcnGxce+21V+x8/cu//IvhcDiMt956y2hsbDQfx44dM2s4xv7PueaLY6yzBQsWGG+//bZRW1trvP/++8a//du/GVdddZVRUlJiGEb3HV8EKz/3X//1X0b//v2N4OBg45ZbbvH5au6VbMqUKUbfvn2NoKAgw+VyGXfffbexe/duc3tHR4fx2GOPGU6n07Db7caPf/xjY9euXd3Y8aW3ZcsWQ1Knx/Tp0w3DOL85On78uPHggw8a11xzjRESEmKkpqYadXV13bA3F9/Z5uvYsWNGSkqK0adPHyMoKMi47rrrjOnTp3eaiytpvk43V5KMlStXmjUcY//nXPPFMdbZfffdZ/7969OnjzFmzBgzVBlG9x1fNsMwjK6vdwEAAOAkrrECAACwCMEKAADAIgQrAAAAixCsAAAALEKwAgAAsAjBCgAAwCIEKwAAAIsQrAAAACxCsAIAALAIwQoAAMAiBCsAAACLEKwAAAAs8v8A7WPbv8yHLKEAAAAASUVORK5CYII="},"metadata":{}}]},{"cell_type":"code","source":"#------ model_1: CNN1D\nnum_words=20000\nlen_text=27\n\ntext_vectorizer = layers.TextVectorization(max_tokens=num_words, output_sequence_length=len_text)\ntext_vectorizer.adapt(train_text)\nembedding = layers.Embedding(input_dim=num_words, output_dim=64, input_length=len_text)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:30.241036Z","iopub.execute_input":"2024-08-15T17:46:30.242169Z","iopub.status.idle":"2024-08-15T17:46:44.984550Z","shell.execute_reply.started":"2024-08-15T17:46:30.242121Z","shell.execute_reply":"2024-08-15T17:46:44.983678Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"ohe = OneHotEncoder().fit(np.array(train_label).reshape(-1,1))\n\ntrain_label_ohe = ohe.transform(np.array(train_label).reshape(-1,1)).toarray()\nvalid_label_ohe = ohe.transform(np.array(valid_label).reshape(-1,1)).toarray()\ntest_label_ohe = ohe.transform(np.array(test_label).reshape(-1,1)).toarray()","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:44.985752Z","iopub.execute_input":"2024-08-15T17:46:44.986039Z","iopub.status.idle":"2024-08-15T17:46:45.454173Z","shell.execute_reply.started":"2024-08-15T17:46:44.986014Z","shell.execute_reply":"2024-08-15T17:46:45.453392Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"train_data = tf.data.Dataset.from_tensor_slices((train_text, train_label_ohe))\nvalid_data = tf.data.Dataset.from_tensor_slices((valid_text, valid_label_ohe))\ntest_data = tf.data.Dataset.from_tensor_slices((test_text, test_label_ohe))","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:45.455395Z","iopub.execute_input":"2024-08-15T17:46:45.455697Z","iopub.status.idle":"2024-08-15T17:46:46.414707Z","shell.execute_reply.started":"2024-08-15T17:46:45.455671Z","shell.execute_reply":"2024-08-15T17:46:46.413811Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"batch_size=32\n\ntrain_data = train_data.batch(batch_size).prefetch(tf.data.AUTOTUNE)\nvalid_data = valid_data.batch(batch_size).prefetch(tf.data.AUTOTUNE)\ntest_data = test_data.batch(batch_size).prefetch(tf.data.AUTOTUNE)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:46.415904Z","iopub.execute_input":"2024-08-15T17:46:46.416282Z","iopub.status.idle":"2024-08-15T17:46:46.428309Z","shell.execute_reply.started":"2024-08-15T17:46:46.416250Z","shell.execute_reply":"2024-08-15T17:46:46.427448Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"inputs = layers.Input(shape=(1,), dtype=tf.string)\nx = text_vectorizer(inputs)\nx = embedding(x)\nx = layers.Conv1D(filters=32, kernel_size=5, padding='same')(x)\nx = layers.GlobalAveragePooling1D()(x)\noutputs = layers.Dense(5, activation='softmax')(x)\n\nmodel_1 = keras.Model(inputs, outputs)\nmodel_1.summary()","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:46.429819Z","iopub.execute_input":"2024-08-15T17:46:46.430157Z","iopub.status.idle":"2024-08-15T17:46:46.554060Z","shell.execute_reply.started":"2024-08-15T17:46:46.430125Z","shell.execute_reply":"2024-08-15T17:46:46.553164Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"Model: \"model\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n input_1 (InputLayer)        [(None, 1)]               0         \n                                                                 \n text_vectorization (TextVec  (None, 27)               0         \n torization)                                                     \n                                                                 \n embedding (Embedding)       (None, 27, 64)            1280000   \n                                                                 \n conv1d (Conv1D)             (None, 27, 32)            10272     \n                                                                 \n global_average_pooling1d (G  (None, 32)               0         \n lobalAveragePooling1D)                                          \n                                                                 \n dense (Dense)               (None, 5)                 165       \n                                                                 \n=================================================================\nTotal params: 1,290,437\nTrainable params: 1,290,437\nNon-trainable params: 0\n_________________________________________________________________\n","output_type":"stream"}]},{"cell_type":"code","source":"model_1.compile(loss=keras.losses.CategoricalCrossentropy(),\n                optimizer=keras.optimizers.Adam(),\n                metrics=['accuracy'])\n\nhistory_1 = model_1.fit(train_data,\n                        epochs=10,\n                        steps_per_epoch=len(train_data),\n                        validation_data=valid_data,\n                        validation_steps=0.2*(len(valid_data)),\n                        callbacks=[keras.callbacks.EarlyStopping(monitor='val_accuracy', restore_best_weights=True, patience=3)])","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:46:46.555470Z","iopub.execute_input":"2024-08-15T17:46:46.556080Z","iopub.status.idle":"2024-08-15T17:49:15.656167Z","shell.execute_reply.started":"2024-08-15T17:46:46.556044Z","shell.execute_reply":"2024-08-15T17:49:15.655161Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Epoch 1/10\n5627/5627 [==============================] - 62s 10ms/step - loss: 0.6167 - accuracy: 0.7731 - val_loss: 0.5448 - val_accuracy: 0.7975\nEpoch 2/10\n5627/5627 [==============================] - 22s 4ms/step - loss: 0.4907 - accuracy: 0.8245 - val_loss: 0.5430 - val_accuracy: 0.7994\nEpoch 3/10\n5627/5627 [==============================] - 22s 4ms/step - loss: 0.4422 - accuracy: 0.8445 - val_loss: 0.5629 - val_accuracy: 0.7961\nEpoch 4/10\n5627/5627 [==============================] - 22s 4ms/step - loss: 0.3995 - accuracy: 0.8624 - val_loss: 0.6062 - val_accuracy: 0.7852\nEpoch 5/10\n5627/5627 [==============================] - 21s 4ms/step - loss: 0.3613 - accuracy: 0.8788 - val_loss: 0.6530 - val_accuracy: 0.7788\n","output_type":"stream"}]},{"cell_type":"code","source":"pred = model_1.predict(test_data)\nscore_1 = model_1.evaluate(test_data)\n\npred = tf.argmax(pred, axis=1)\nget_score(test_label_transformed, pred)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:49:15.659362Z","iopub.execute_input":"2024-08-15T17:49:15.659651Z","iopub.status.idle":"2024-08-15T17:49:20.823281Z","shell.execute_reply.started":"2024-08-15T17:49:15.659625Z","shell.execute_reply":"2024-08-15T17:49:20.822372Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"942/942 [==============================] - 2s 2ms/step\n942/942 [==============================] - 3s 3ms/step - loss: 0.5672 - accuracy: 0.7928\nf1 score: 0.7899589949794441\naccuracy score: 0.7927990708478513\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Model 2: Feature Extraction\nModel is built using tensorflow hub's trained model **(Universal Sentence Encoder)**. The output tensors are then followed with several Fully Connected Layers.\n\nTraining the model results in accuracy **better than the baseline model**, but performs **worse than Model 1**.","metadata":{}},{"cell_type":"code","source":"#--------- model_2: using feature extraction model from tfhub (USE)\nUSE = hub.KerasLayer(\"https://tfhub.dev/google/universal-sentence-encoder/4\")","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:49:20.824433Z","iopub.execute_input":"2024-08-15T17:49:20.824718Z","iopub.status.idle":"2024-08-15T17:49:35.842342Z","shell.execute_reply.started":"2024-08-15T17:49:20.824693Z","shell.execute_reply":"2024-08-15T17:49:35.841344Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"inputs = layers.Input(shape=(), dtype=tf.string)\nx = USE(inputs)\nx = layers.Dense(64, activation='relu')(x)\nx = layers.Dense(32, activation='relu')(x)\noutputs = layers.Dense(5, activation='softmax')(x)\n\nmodel_2 = keras.Model(inputs, outputs)\nmodel_2.summary()","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:49:35.843705Z","iopub.execute_input":"2024-08-15T17:49:35.844459Z","iopub.status.idle":"2024-08-15T17:49:36.539019Z","shell.execute_reply.started":"2024-08-15T17:49:35.844425Z","shell.execute_reply":"2024-08-15T17:49:36.538129Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"Model: \"model_1\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n input_2 (InputLayer)        [(None,)]                 0         \n                                                                 \n keras_layer (KerasLayer)    (None, 512)               256797824 \n                                                                 \n dense_1 (Dense)             (None, 64)                32832     \n                                                                 \n dense_2 (Dense)             (None, 32)                2080      \n                                                                 \n dense_3 (Dense)             (None, 5)                 165       \n                                                                 \n=================================================================\nTotal params: 256,832,901\nTrainable params: 35,077\nNon-trainable params: 256,797,824\n_________________________________________________________________\n","output_type":"stream"}]},{"cell_type":"code","source":"model_2.compile(loss=keras.losses.CategoricalCrossentropy(),\n           optimizer=keras.optimizers.Adam(),\n           metrics=['accuracy'])\n\nhistory_2 = model_2.fit(train_data,\n                        epochs=10,\n                        steps_per_epoch=len(train_data),\n                        validation_data=valid_data,\n                        validation_steps=len(valid_data)*0.2,\n                        callbacks=[keras.callbacks.EarlyStopping(monitor='val_accuracy', restore_best_weights=True, patience=3)])","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:49:36.540245Z","iopub.execute_input":"2024-08-15T17:49:36.540520Z","iopub.status.idle":"2024-08-15T17:59:13.134233Z","shell.execute_reply.started":"2024-08-15T17:49:36.540496Z","shell.execute_reply":"2024-08-15T17:59:13.133439Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"Epoch 1/10\n5627/5627 [==============================] - 62s 10ms/step - loss: 0.7237 - accuracy: 0.7219 - val_loss: 0.6475 - val_accuracy: 0.7568\nEpoch 2/10\n5627/5627 [==============================] - 56s 10ms/step - loss: 0.6341 - accuracy: 0.7578 - val_loss: 0.6176 - val_accuracy: 0.7659\nEpoch 3/10\n5627/5627 [==============================] - 59s 11ms/step - loss: 0.6051 - accuracy: 0.7692 - val_loss: 0.6056 - val_accuracy: 0.7692\nEpoch 4/10\n5627/5627 [==============================] - 58s 10ms/step - loss: 0.5871 - accuracy: 0.7762 - val_loss: 0.6024 - val_accuracy: 0.7703\nEpoch 5/10\n5627/5627 [==============================] - 56s 10ms/step - loss: 0.5745 - accuracy: 0.7810 - val_loss: 0.6005 - val_accuracy: 0.7723\nEpoch 6/10\n5627/5627 [==============================] - 56s 10ms/step - loss: 0.5651 - accuracy: 0.7858 - val_loss: 0.5994 - val_accuracy: 0.7731\nEpoch 7/10\n5627/5627 [==============================] - 56s 10ms/step - loss: 0.5575 - accuracy: 0.7884 - val_loss: 0.6008 - val_accuracy: 0.7730\nEpoch 8/10\n5627/5627 [==============================] - 57s 10ms/step - loss: 0.5511 - accuracy: 0.7912 - val_loss: 0.6031 - val_accuracy: 0.7753\nEpoch 9/10\n5627/5627 [==============================] - 57s 10ms/step - loss: 0.5455 - accuracy: 0.7929 - val_loss: 0.6055 - val_accuracy: 0.7736\nEpoch 10/10\n5627/5627 [==============================] - 57s 10ms/step - loss: 0.5408 - accuracy: 0.7952 - val_loss: 0.6090 - val_accuracy: 0.7723\n","output_type":"stream"}]},{"cell_type":"code","source":"pred_2 = model_2.predict(test_data)\nscore_2 = model_2.evaluate(test_data)\n\npred_2 = tf.argmax(pred_2, axis=1)\nget_score(test_label_transformed, pred_2)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:59:13.135579Z","iopub.execute_input":"2024-08-15T17:59:13.135880Z","iopub.status.idle":"2024-08-15T17:59:30.204086Z","shell.execute_reply.started":"2024-08-15T17:59:13.135855Z","shell.execute_reply":"2024-08-15T17:59:30.203109Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"942/942 [==============================] - 8s 8ms/step\n942/942 [==============================] - 8s 9ms/step - loss: 0.6358 - accuracy: 0.7629\nf1 score: 0.7591737336605189\naccuracy score: 0.7629002820640451\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Model 3: Another 1D-CNN\nThis model is built under the same logic of Model 1. However, this time, the input text is vectorized based on each character **(character vectorized)**. \n\nThe model performs **as good as Model 1**.","metadata":{}},{"cell_type":"code","source":"train_len_text = pd.DataFrame({'len': list(map(lambda data: len(data), train_text))})\ntrain_len_text.plot.hist();\n\nprint(f\"Average char length: {train_len_text.sum()/len(train_len_text)}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:59:30.211266Z","iopub.execute_input":"2024-08-15T17:59:30.211544Z","iopub.status.idle":"2024-08-15T17:59:30.635941Z","shell.execute_reply.started":"2024-08-15T17:59:30.211520Z","shell.execute_reply":"2024-08-15T17:59:30.635070Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"Average char length: len    149.366257\ndtype: float64\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"char_vectorizer = layers.TextVectorization(max_tokens=30, split='character', output_sequence_length=150)\nchar_vectorizer.adapt(train_text)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:59:30.637019Z","iopub.execute_input":"2024-08-15T17:59:30.637289Z","iopub.status.idle":"2024-08-15T17:59:46.255074Z","shell.execute_reply.started":"2024-08-15T17:59:30.637265Z","shell.execute_reply":"2024-08-15T17:59:46.254112Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"char_embedding = layers.Embedding(input_dim=30, output_dim=128, input_length=200)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:59:46.256356Z","iopub.execute_input":"2024-08-15T17:59:46.256701Z","iopub.status.idle":"2024-08-15T17:59:46.263057Z","shell.execute_reply.started":"2024-08-15T17:59:46.256670Z","shell.execute_reply":"2024-08-15T17:59:46.262168Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"inputs = layers.Input(shape=(1,), dtype=tf.string)\nx = char_vectorizer(inputs)\nx = char_embedding(x)\nx = layers.Conv1D(32, 5, activation='relu', padding='same')(x)\nx = layers.Conv1D(32, 5, activation='relu', padding='same')(x)\nx = layers.MaxPooling1D()(x)\nx = layers.Conv1D(64, 5, activation='relu', padding='same')(x)\nx = layers.Conv1D(64, 5, activation='relu', padding='same')(x)\nx = layers.MaxPooling1D()(x)\nx = layers.GlobalAveragePooling1D()(x)\noutputs = layers.Dense(5, activation='sigmoid')(x)\n\nmodel_3 = keras.Model(inputs, outputs)\nmodel_3.summary()","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:59:46.264256Z","iopub.execute_input":"2024-08-15T17:59:46.264866Z","iopub.status.idle":"2024-08-15T17:59:46.455299Z","shell.execute_reply.started":"2024-08-15T17:59:46.264831Z","shell.execute_reply":"2024-08-15T17:59:46.454212Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"Model: \"model_2\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n input_3 (InputLayer)        [(None, 1)]               0         \n                                                                 \n text_vectorization_1 (TextV  (None, 150)              0         \n ectorization)                                                   \n                                                                 \n embedding_1 (Embedding)     (None, 150, 128)          3840      \n                                                                 \n conv1d_1 (Conv1D)           (None, 150, 32)           20512     \n                                                                 \n conv1d_2 (Conv1D)           (None, 150, 32)           5152      \n                                                                 \n max_pooling1d (MaxPooling1D  (None, 75, 32)           0         \n )                                                               \n                                                                 \n conv1d_3 (Conv1D)           (None, 75, 64)            10304     \n                                                                 \n conv1d_4 (Conv1D)           (None, 75, 64)            20544     \n                                                                 \n max_pooling1d_1 (MaxPooling  (None, 37, 64)           0         \n 1D)                                                             \n                                                                 \n global_average_pooling1d_1   (None, 64)               0         \n (GlobalAveragePooling1D)                                        \n                                                                 \n dense_4 (Dense)             (None, 5)                 325       \n                                                                 \n=================================================================\nTotal params: 60,677\nTrainable params: 60,677\nNon-trainable params: 0\n_________________________________________________________________\n","output_type":"stream"}]},{"cell_type":"code","source":"model_3.compile(loss=keras.losses.CategoricalCrossentropy(),\n               optimizer=keras.optimizers.Adam(),\n               metrics=['accuracy'])\n\nhistory_3 = model_3.fit(train_data,\n                       epochs=10, \n                       validation_data=valid_data,\n                       validation_steps=len(valid_data)*0.2,\n                       callbacks=[keras.callbacks.EarlyStopping(monitor='val_accuracy', restore_best_weights=True, patience=3)])","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:59:46.456806Z","iopub.execute_input":"2024-08-15T17:59:46.457179Z","iopub.status.idle":"2024-08-15T18:05:45.803462Z","shell.execute_reply.started":"2024-08-15T17:59:46.457145Z","shell.execute_reply":"2024-08-15T18:05:45.802489Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"Epoch 1/10\n5627/5627 [==============================] - 40s 7ms/step - loss: 0.8590 - accuracy: 0.6541 - val_loss: 0.6460 - val_accuracy: 0.7545\nEpoch 2/10\n5627/5627 [==============================] - 36s 6ms/step - loss: 0.6340 - accuracy: 0.7646 - val_loss: 0.6079 - val_accuracy: 0.7733\nEpoch 3/10\n5627/5627 [==============================] - 35s 6ms/step - loss: 0.5818 - accuracy: 0.7856 - val_loss: 0.5957 - val_accuracy: 0.7751\nEpoch 4/10\n5627/5627 [==============================] - 35s 6ms/step - loss: 0.5555 - accuracy: 0.7960 - val_loss: 0.5908 - val_accuracy: 0.7809\nEpoch 5/10\n5627/5627 [==============================] - 35s 6ms/step - loss: 0.5368 - accuracy: 0.8032 - val_loss: 0.5727 - val_accuracy: 0.7890\nEpoch 6/10\n5627/5627 [==============================] - 35s 6ms/step - loss: 0.5225 - accuracy: 0.8088 - val_loss: 0.5580 - val_accuracy: 0.7958\nEpoch 7/10\n5627/5627 [==============================] - 36s 6ms/step - loss: 0.5110 - accuracy: 0.8131 - val_loss: 0.5482 - val_accuracy: 0.7960\nEpoch 8/10\n5627/5627 [==============================] - 35s 6ms/step - loss: 0.5004 - accuracy: 0.8164 - val_loss: 0.5503 - val_accuracy: 0.7956\nEpoch 9/10\n5627/5627 [==============================] - 35s 6ms/step - loss: 0.4908 - accuracy: 0.8208 - val_loss: 0.5355 - val_accuracy: 0.8075\nEpoch 10/10\n5627/5627 [==============================] - 35s 6ms/step - loss: 0.4826 - accuracy: 0.8237 - val_loss: 0.5491 - val_accuracy: 0.8032\n","output_type":"stream"}]},{"cell_type":"code","source":"pred_3 = model_3.predict(test_data)\nscore_3 = model_3.evaluate(test_data)\n\npred_3 = tf.argmax(pred_3, axis=1)\nget_score(test_label_transformed, pred_3) ","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:05:45.805060Z","iopub.execute_input":"2024-08-15T18:05:45.805450Z","iopub.status.idle":"2024-08-15T18:05:53.362295Z","shell.execute_reply.started":"2024-08-15T18:05:45.805415Z","shell.execute_reply":"2024-08-15T18:05:53.361269Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"942/942 [==============================] - 3s 3ms/step\n942/942 [==============================] - 4s 4ms/step - loss: 0.5860 - accuracy: 0.7888\nf1 score: 0.7844382531290902\naccuracy score: 0.7888169902107184\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Model 4: Multimodal Model\nModel are built by **concatenating chararcter vectorization technique** and **trained Universal Sentence Encoder model**. There's a slight difference on the character vectorization model, which uses BiDirectional LSTM layers (rather than 1D-CNN). The concatenated result of these 2 models are then connected to dropout layers to avoid overfitting.\n\nThis model performs **slightly better than 1D-CNN models**.","metadata":{}},{"cell_type":"code","source":"#--------model_4: multimodal model\ninputs_token = layers.Input(shape=[], dtype=tf.string)\nx_token = USE(inputs_token)\noutputs_token = layers.Dense(128, activation='relu')(x_token)\nmodel_4_token = keras.Model(inputs_token, outputs_token)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:05:53.363622Z","iopub.execute_input":"2024-08-15T18:05:53.364006Z","iopub.status.idle":"2024-08-15T18:05:53.465028Z","shell.execute_reply.started":"2024-08-15T18:05:53.363970Z","shell.execute_reply":"2024-08-15T18:05:53.464022Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"char_vectorizer = layers.TextVectorization(max_tokens=80, output_sequence_length=300, split='character')\nchar_vectorizer.adapt(train_text)\n\nchar_embedding = layers.Embedding(input_dim=80, output_dim=32, input_length=300, mask_zero=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:05:53.466266Z","iopub.execute_input":"2024-08-15T18:05:53.466558Z","iopub.status.idle":"2024-08-15T18:06:09.105434Z","shell.execute_reply.started":"2024-08-15T18:05:53.466533Z","shell.execute_reply":"2024-08-15T18:06:09.104572Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"inputs_char = layers.Input(shape=(1,), dtype=tf.string)\nx_char = char_vectorizer(inputs_char)\nx_char = char_embedding(x_char)\noutputs_char = layers.Bidirectional(layers.LSTM(32))(x_char)\nmodel_4_char = keras.Model(inputs_char, outputs_char)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:06:09.106569Z","iopub.execute_input":"2024-08-15T18:06:09.106859Z","iopub.status.idle":"2024-08-15T18:06:10.840470Z","shell.execute_reply.started":"2024-08-15T18:06:09.106835Z","shell.execute_reply":"2024-08-15T18:06:10.839656Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"model_4_concat_layer = layers.Concatenate()([model_4_token.output, model_4_char.output])\nx = layers.Dropout(0.5)(model_4_concat_layer)\nx = layers.Dense(128, activation='relu')(x)\nx = layers.Dropout(0.5)(x)\noutputs = layers.Dense(5, activation='softmax')(x)\n\nmodel_4 = keras.Model([model_4_token.input, model_4_char.input], outputs)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:06:10.841556Z","iopub.execute_input":"2024-08-15T18:06:10.841803Z","iopub.status.idle":"2024-08-15T18:06:10.884981Z","shell.execute_reply.started":"2024-08-15T18:06:10.841781Z","shell.execute_reply":"2024-08-15T18:06:10.884236Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"from keras.utils import plot_model\nplot_model(model_4)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:06:10.886044Z","iopub.execute_input":"2024-08-15T18:06:10.886354Z","iopub.status.idle":"2024-08-15T18:06:11.077532Z","shell.execute_reply.started":"2024-08-15T18:06:10.886329Z","shell.execute_reply":"2024-08-15T18:06:11.076549Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"image/png":"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mj59uk6cOOF2NKBe2rt3ryZPnqyhQ4fq4osv1o4dO5SamqqoqCi3owGOoYQCqLZBgwZp8+bNeuWVV/T666+rR48eTNEDNVBYWKh58+apZ8+eysjI0LJly5Senq4uXbq4HQ1wHCUUQI0EBQVp8uTJys7O1rhx43TnnXdqyJAh2rZtm9vRgDotPT1dvXv31lNPPaXf//73+uqrr/imMjRolFAAtdKiRQulpqbq888/V2Fhoa644gpNnz5dx48fdzsaUKdkZ2drxIgRSkxM1MCBA7V7926lpKQoLCzM7WiAqyihAM7JlVdeqbVr1+qVV17RG2+84Zui53sw0NAdPXpUjzzyiC699FIdOnRIn332mRYuXKjWrVu7HQ2oEyihAM7ZT6fok5KSdNddd+m6667TV1995XY0wHFmpoULF6p79+565ZVX9Mwzz2j9+vUaMGCA29GAOoUSCuC8ad68uVJTU7V+/XoVFxf7puiPHTvmdjTAERs3btS1116ru+++W2PGjOHbjoAqUEIBnHdXXHGF1qxZo7/97W9688031aNHDy1YsEClpaVuRwMuiAMHDui+++7TNddco4iICH3xxRd66aWX1KJFC7ejAXUWJRTABeHxeDR58mRlZWUpOTlZ999/v/r166f169e7HQ04b4qLi5WamqoePXro3Xff1auvvqqPPvpIffr0cTsaUOdRQgFcUM2aNVNqaqo2bNggr9er/v37a/LkycrLy3M7GnBOVq5cqcsuu0yzZ8/WlClTtGPHDk2ePNntWEC9QQkF4IjLL79cq1ev1quvvqoPPvhA3bt3V2pqKlP0qHe+/vprJScn6/rrr1fnzp21fft2zZ07V40bN3Y7GlCvUEIBOOanU/S33nqrZs6cqauvvloZGRluRwPOqqCgQCkpKbrkkku0detWLV++XOnp6erYsaPb0YB6iRIKwHFNmzZVamqqNm7cqEaNGmnAgAGaPHmycnNz3Y4GVCg9PV29evVSamqqUlJStHXrViUkJLgdC6jXKKEAXBMXF6dPP/1US5Ys0ccff+yboi8pKXE7GiBJ2rJli375y19qzJgx+uUvf6ns7GzNmjVLoaGhbkcD6j1KKADXjR49Wjt27NC0adP08MMP6+qrr9a6devcjoUG7IcfftD06dN15ZVXqqioSGvWrNHChQvVqlUrt6MBAYMSCqBOiIyM9E1zXnTRRb4p+kOHDrkdDQ1IaWmp79uOFi9erBdffFEZGRnq16+f29GAgEMJBVCndO/eXe+//77+9a9/6ZNPPmGKHo755JNPdPnll+uee+7RxIkTlZWVpV//+tcKCuKpErgQeGQBqJPKpuinT5+uWbNm6corr9Tq1avdjoUAtG/fPk2ePFlDhgxRq1attGXLFqWmpqpJkyZuRwMCGiUUQJ3VqFEjpaSk6KuvvlLr1q31y1/+UpMnT1ZOTo7b0RAATp8+rdTUVPXs2VPr1q1TWlqaVqxYoV69erkdDWgQKKEA6rxf/OIXeu+99/Svf/1Ln332mbp376558+bp9OnTbkdDPZWenq6ePXvqD3/4g2bMmKGvvvpKSUlJbscCGhRKKIB6Y/To0crMzNSDDz6olJQUXXrppVqxYoXbsVCP7Ny5UyNHjtRNN92kXr16aceOHUpJSVF4eLjb0YAGhxIKoF756RR9ly5ddMMNN2j06NH6/vvv3Y6GOuzkyZO+/7js379fn376qdLT09WhQwe3owENFiUUQL3UtWtXLVu2TO+8844yMzPVs2dPpaSkMEUPP2amhQsXqmvXrnrhhRc0b948bdy4UYMGDXI7GtDgUUIB1GtlU/QzZ87UvHnz1KdPH73//vtux0IdsGnTJg0cOFB33nmnhg0bpqysLE2fPl3BwcFuRwMgSiiAABAREaGUlBRlZmYqLi5Ow4cP1+jRo/Xdd9+5HQ0uOHz4sKZPn65rrrlGXq9Xmzdv1sKFC9WyZUu3owH4CUoogIDRuXNnLVq0SCtWrNDu3bvVq1cvpaSk6NSpU25HgwPOnDmj1NRUdenSRf/7v/+rv//971q1apUuvfRSt6MBqIDHzMztEABwvp0+fVp/+ctf9Nhjjyk2NlapqakaMWKE27FwgaxatUrTpk3Tzp079Zvf/EZPP/20oqKi3I4FoHKZvBIKICCFhoZq+vTpysrKUr9+/XTjjTdq9OjR+ve//+12NJxHe/fu1eTJkzV06FB17NhRO3bsUGpqKgUUqAcooQACWtu2bbVw4UKtXLlS33zzjW+KvqioqNJ9PvvsM5WWljqYEj93+PBh7dmzp9LLCwsLlZKSol/84hf6/PPPtWzZMqWnp6tz584OpgRwLiihABqEoUOHasuWLZozZ46ee+45XXLJJVq6dGm5cbm5uRo9erRmzZrlQkpIP76VIjExUb/97W8rvDw9PV29evXSs88+q1mzZmnr1q268cYbHU4J4FxRQgE0GF6v1zdFf+2112r06NEaPXq0vvnmG9+YRx55RPn5+Xr22Wf16quvupi24br33nu1bt06vfPOO37fiJWVlaXhw4crMTFRgwYN0u7du5WSkqKwsDAX0wKoLRYmAWiwPv74Y/32t7/V119/rWnTpunGG2/Uddddp7I/i8HBwVqxYoWGDBnictKGY86cOXr00UdlZgoODlanTp20du1aPf3003rxxRcVFxenP//5z7r22mvdjgrg3GRSQgE0aMXFxUpNTdWTTz6p06dPq6SkRGfOnJH0Ywlt3LixNm7cqK5du7qcNPD9v//3/zRu3Dj99GkpODhY4eHhaty4sebMmaPbb79dQUFM4gEBgBIKAJI0b948zZ49Wz//k+j1enXxxRdrw4YNatq0qUvpAt8XX3yhAQMG6NSpU+XOQWhoqLZu3aru3bu7lA7ABcBHNAHAkSNHNHfu3HLlR/rxldLvvvtOSUlJvldIcX7t379fN954o4qLiys8B2amuXPnupAMwIVECQXQ4M2ePVsnT56s9PLi4mKtWrVKDz30kIOpGob8/HwNGzZMR44cUUlJSYVjiouL9Y9//EOff/65w+kAXEhMxwNo0DZt2qSrrrqqwlfgKrJgwQLde++9FzhVw1BaWqqbbrpJ77///llfZQ4JCVGvXr20efNm3hMKBAam4wE0XKWlpZo6darMTKGhodXaZ8qUKfr4448vbLAGYsaMGVq+fHm13+awdetW/eMf/7jAqQA4hVdCATRYpaWlysrK0saNG7Vx40ZlZGRo69atOnXqlIKDgxUcHKzTp0/77RMUFKTGjRtr06ZNrJg/B3/96181ZcqUCi/zer0qKSlRaWmpvF6vevTooQEDBuiKK67QwIED1bNnT4fTArgAWB0P1CeLFi1yO0LAKykp0d69e/X111/rm2++0c6dO7V3716VlJQoODjYNyYmJkZz5sxRZGSky4nrn61bt2rOnDkqLS1VcHCwSktLZWbyer3q0KGDfvGLX6hTp07q3Lmz2rZt67vdcWEkJye7HQENEyUUqE88Ho/bEQAEGGoAXJIZ4nYCADWTlpbGKxd1QGFhobZs2aJ27dqpffv2bseRJCUlJUmSFi9e7HKSymVkZKhFixbq2rUr/6ly2aJFizR+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hgUHB1tubq4dOHDAOnXqZDExMZaenm7Hjh2z7OxsGzt2rHk8Hnv55Zf9jhcXF2eRkZHWv39/W7t2reXn59uGDRvs0ksvtdDQUPv44499Y2t67MjISBswYEC569C3b19r0aJFue2Vja+ttm3bWnBw8DkdY9y4cTZu3Lga77d582aTZImJiZWOKSwsNEkmyfbv3+/bzjmuWFpamvF0jAZoG/d6AGdV0xKalJRkkuytt97y275v3z4LCwursoS+++67FR7zjjvuMEn2z3/+0297UVGRtWnTxiIiIuzgwYO+7XFxcSbJNm/e7Dd+69atJsni4uJqfWxKaNUltKCgoMoSyjn2RwlFA7WN6XgA593y5cslSQkJCX7b27Rpo27dulW579VXX13h9rfffluSNHLkSL/tYWFhio+PV2Fhod5//32/yyIjI3XZZZf5bevTp4/atGmjL7/8UgcOHKj1sVG5stvV6/X6TV2X4RwDkHhPKIDz7NSpUzpx4oTCw8PVuHHjcpe3atWqyv0jIyMrPOaxY8cUHh5e4ccTxcTESJIOHjzot71p06YV/htlGQ4dOlTrY6NyZe/97d+/v7xeb7nLOccAJEoogPMsLCxMUVFRKmNBeDEAAA4USURBVCoqUn5+frnLjxw5UqtjRkdHq6ioSCdOnCh3edmHt7du3dpv++HDhyv8rMpDhw5J+rGo1ObYQUFBOn36dLmxR48erTC/x+Op7KoFnNLSUs2fP1+S9MADD1R7P84x0PBQQgGcdyNGjJD0f9PyZfLy8pSdnV2rY958882SpGXLlvltP3XqlFauXKmIiIhy0/9FRUXasGGD37avvvpK+/fvV1xcnGJjY2t17NjYWO3bt89v7MGDB7Vnz54Kszdq1Miv0HTv3l0LFiw463Wuj2bPnq3169fr5ptvVlJSUo325RwDDYzb70oFUPephguTdu/ebc2bN/dbHZ+ZmWkJCQnWqlWrKhcmFRYWVnjMn69uPn78uN/q5gULFviNj4uLs+joaIuPj6/xyumzHXvq1KkmyV544QU7ceKE7d6925KTk61t27YVLloZPny4RUdH2549e2zt2rUWEhJi27dvr/bt+XN1aWFSSUmJ5eTk2JIlS2zo0KEmye666y4rKCgoty/nuGIsTEIDxep4AGdX0xJqZpadnW1jxoyxJk2aWEREhF111VW2dOlSi4+P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","text/plain":"<IPython.core.display.Image object>"},"metadata":{}}]},{"cell_type":"code","source":"train_data_4 = tf.data.Dataset.from_tensor_slices(((train_text, train_text), train_label_ohe))\nvalid_data_4 = tf.data.Dataset.from_tensor_slices(((valid_text, valid_text), valid_label_ohe))\ntest_data_4 = tf.data.Dataset.from_tensor_slices(((test_text, test_text), test_label_ohe))\n\ntrain_data_4 = train_data_4.batch(batch_size).prefetch(tf.data.AUTOTUNE)\nvalid_data_4 = valid_data_4.batch(batch_size).prefetch(tf.data.AUTOTUNE)\ntest_data_4 = test_data_4.batch(batch_size).prefetch(tf.data.AUTOTUNE)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:06:11.078961Z","iopub.execute_input":"2024-08-15T18:06:11.079476Z","iopub.status.idle":"2024-08-15T18:06:12.953989Z","shell.execute_reply.started":"2024-08-15T18:06:11.079442Z","shell.execute_reply":"2024-08-15T18:06:12.953230Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"model_4.compile(loss=keras.losses.CategoricalCrossentropy(),\n               optimizer=keras.optimizers.Adam(),\n               metrics=['accuracy'])\n\nhistory_4 = model_4.fit(train_data_4,\n                       epochs=10, \n                       validation_data=valid_data_4,\n                       validation_steps=len(valid_data)*0.2,\n                       callbacks=[keras.callbacks.EarlyStopping(monitor='val_accuracy', restore_best_weights=True, patience=3)])","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:06:12.955051Z","iopub.execute_input":"2024-08-15T18:06:12.955337Z","iopub.status.idle":"2024-08-15T18:33:51.314676Z","shell.execute_reply.started":"2024-08-15T18:06:12.955306Z","shell.execute_reply":"2024-08-15T18:33:51.313854Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"Epoch 1/10\n5627/5627 [==============================] - 180s 30ms/step - loss: 0.7615 - accuracy: 0.7103 - val_loss: 0.6248 - val_accuracy: 0.7627\nEpoch 2/10\n5627/5627 [==============================] - 164s 29ms/step - loss: 0.6658 - accuracy: 0.7500 - val_loss: 0.5838 - val_accuracy: 0.7817\nEpoch 3/10\n5627/5627 [==============================] - 165s 29ms/step - loss: 0.6314 - accuracy: 0.7648 - val_loss: 0.5576 - val_accuracy: 0.7913\nEpoch 4/10\n5627/5627 [==============================] - 165s 29ms/step - loss: 0.6110 - accuracy: 0.7740 - val_loss: 0.5457 - val_accuracy: 0.7960\nEpoch 5/10\n5627/5627 [==============================] - 165s 29ms/step - loss: 0.5954 - accuracy: 0.7798 - val_loss: 0.5319 - val_accuracy: 0.7996\nEpoch 6/10\n5627/5627 [==============================] - 164s 29ms/step - loss: 0.5836 - accuracy: 0.7842 - val_loss: 0.5305 - val_accuracy: 0.8047\nEpoch 7/10\n5627/5627 [==============================] - 164s 29ms/step - loss: 0.5852 - accuracy: 0.7824 - val_loss: 0.5207 - val_accuracy: 0.8067\nEpoch 8/10\n5627/5627 [==============================] - 164s 29ms/step - loss: 0.5649 - accuracy: 0.7914 - val_loss: 0.5094 - val_accuracy: 0.8069\nEpoch 9/10\n5627/5627 [==============================] - 163s 29ms/step - loss: 0.5527 - accuracy: 0.7964 - val_loss: 0.5225 - val_accuracy: 0.8036\nEpoch 10/10\n5627/5627 [==============================] - 164s 29ms/step - loss: 0.5451 - accuracy: 0.7989 - val_loss: 0.4939 - val_accuracy: 0.8145\n","output_type":"stream"}]},{"cell_type":"code","source":"pred_4 = model_4.predict(test_data_4)\nscore_4 = model_4.evaluate(test_data_4)\n\npred_4 = tf.argmax(pred_4, axis=1)\nget_score(test_label_transformed, pred_4) ","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:33:51.316045Z","iopub.execute_input":"2024-08-15T18:33:51.316770Z","iopub.status.idle":"2024-08-15T18:34:21.805043Z","shell.execute_reply.started":"2024-08-15T18:33:51.316736Z","shell.execute_reply":"2024-08-15T18:34:21.804114Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"942/942 [==============================] - 16s 14ms/step\n942/942 [==============================] - 14s 15ms/step - loss: 0.5175 - accuracy: 0.8084\nf1 score: 0.8050284775304919\naccuracy score: 0.8083623693379791\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Model 5: Tribrid Model\nThe tribrid model has the similar idea with Model 4, however, this time, we utilizes the position of the sentence in each section.\n\nThis model is the **best model** we've built so far with over **85% of accurcacy**.","metadata":{}},{"cell_type":"code","source":"def split_dataframe(data):\n    data_target = np.array(data['target'])\n    data_text = np.array(data['text'])\n    data_line_number = np.array(data['line_number'])\n    data_total_lines = np.array(data['total_lines'])\n\n    return (data_target, data_text, data_line_number, data_total_lines)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:21.806491Z","iopub.execute_input":"2024-08-15T18:34:21.806854Z","iopub.status.idle":"2024-08-15T18:34:21.812643Z","shell.execute_reply.started":"2024-08-15T18:34:21.806819Z","shell.execute_reply":"2024-08-15T18:34:21.811780Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"train_target, train_text, train_line_number, train_total_lines = split_dataframe(train_data_df)\nvalid_target, valid_text, valid_line_number, valid_total_lines = split_dataframe(valid_data_df)\ntest_target, test_text, test_line_number, test_total_lines = split_dataframe(test_data_df)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:21.814981Z","iopub.execute_input":"2024-08-15T18:34:21.815602Z","iopub.status.idle":"2024-08-15T18:34:21.837331Z","shell.execute_reply.started":"2024-08-15T18:34:21.815567Z","shell.execute_reply":"2024-08-15T18:34:21.836425Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder\n\ndef ohe_data(fit_data, transform_data):\n    fit_data = fit_data.reshape(-1, 1)\n    transform_data = transform_data.reshape(-1,1)\n\n    ohe = OneHotEncoder().fit(fit_data)\n\n    return np.array(ohe.transform(transform_data).toarray())","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:21.838755Z","iopub.execute_input":"2024-08-15T18:34:21.839048Z","iopub.status.idle":"2024-08-15T18:34:21.844351Z","shell.execute_reply.started":"2024-08-15T18:34:21.839025Z","shell.execute_reply":"2024-08-15T18:34:21.843372Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"train_target_transformed = ohe_data(train_target, train_target)\nvalid_target_transformed = ohe_data(train_target, valid_target)\ntest_target_transformed = ohe_data(train_target, test_target)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:21.845491Z","iopub.execute_input":"2024-08-15T18:34:21.845778Z","iopub.status.idle":"2024-08-15T18:34:21.981573Z","shell.execute_reply.started":"2024-08-15T18:34:21.845755Z","shell.execute_reply":"2024-08-15T18:34:21.980731Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"max_char = 72\noutput_sequence_length_char = 300\n\nchar_vectorizer = layers.TextVectorization(max_tokens=max_char,\n                                           output_sequence_length=output_sequence_length_char,\n                                           split='character')\n\nchar_vectorizer.adapt(['0123456789abcdefghijklmnopqrstuvwxyz\\!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ '])\n\nchar_embedding = layers.Embedding(input_dim=max_char,\n                                  output_dim=25,\n                                  input_length=output_sequence_length_char,\n                                  mask_zero=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:21.982728Z","iopub.execute_input":"2024-08-15T18:34:21.983007Z","iopub.status.idle":"2024-08-15T18:34:22.122988Z","shell.execute_reply.started":"2024-08-15T18:34:21.982982Z","shell.execute_reply":"2024-08-15T18:34:22.122131Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"inputs_char = layers.Input(shape=(1,), dtype=tf.string)\nx_char = char_vectorizer(inputs_char)\nx_char = char_embedding(x_char)\noutputs_char = layers.Bidirectional(layers.LSTM(24))(x_char)\n\nmodel_char_embedding = keras.Model(inputs_char, outputs_char)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:22.124257Z","iopub.execute_input":"2024-08-15T18:34:22.125048Z","iopub.status.idle":"2024-08-15T18:34:23.838320Z","shell.execute_reply.started":"2024-08-15T18:34:22.125011Z","shell.execute_reply":"2024-08-15T18:34:23.837456Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"tf.keras.utils.plot_model(model_char_embedding, to_file=\"embedding_model.png\", show_shapes=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:23.839425Z","iopub.execute_input":"2024-08-15T18:34:23.839721Z","iopub.status.idle":"2024-08-15T18:34:23.902312Z","shell.execute_reply.started":"2024-08-15T18:34:23.839695Z","shell.execute_reply":"2024-08-15T18:34:23.901400Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"image/png":"","text/plain":"<IPython.core.display.Image object>"},"metadata":{}}]},{"cell_type":"code","source":"inputs_token = layers.Input(shape=[], dtype=tf.string)\nx_token = USE(inputs_token)\noutputs_token = layers.Dense(256, activation='relu')(x_token)\nmodel_token_embedding = keras.Model(inputs_token, outputs_token)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:23.903519Z","iopub.execute_input":"2024-08-15T18:34:23.903791Z","iopub.status.idle":"2024-08-15T18:34:24.002156Z","shell.execute_reply.started":"2024-08-15T18:34:23.903768Z","shell.execute_reply":"2024-08-15T18:34:24.001209Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"text_concatenated_layer = layers.Concatenate()([model_char_embedding.output, model_token_embedding.output])","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.003586Z","iopub.execute_input":"2024-08-15T18:34:24.003870Z","iopub.status.idle":"2024-08-15T18:34:24.016980Z","shell.execute_reply.started":"2024-08-15T18:34:24.003845Z","shell.execute_reply":"2024-08-15T18:34:24.016019Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"train_data_df.line_number.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.018285Z","iopub.execute_input":"2024-08-15T18:34:24.018828Z","iopub.status.idle":"2024-08-15T18:34:24.034228Z","shell.execute_reply.started":"2024-08-15T18:34:24.018795Z","shell.execute_reply":"2024-08-15T18:34:24.033401Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"0     15000\n1     15000\n2     15000\n3     15000\n4     14992\n5     14949\n6     14758\n7     14279\n8     13346\n9     11981\n10    10041\n11     7892\n12     5853\n13     4152\n14     2835\n15     1861\n16     1188\n17      751\n18      462\n19      286\n20      162\n21      101\n22       66\n23       33\n24       22\n25       14\n26        7\n27        4\n28        3\n29        1\n30        1\nName: line_number, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_data_df.total_lines.value_counts()[:30]","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.035390Z","iopub.execute_input":"2024-08-15T18:34:24.035736Z","iopub.status.idle":"2024-08-15T18:34:24.048142Z","shell.execute_reply.started":"2024-08-15T18:34:24.035675Z","shell.execute_reply":"2024-08-15T18:34:24.047299Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"12    24468\n11    23639\n13    22113\n10    19400\n14    18438\n15    14610\n9     12285\n16    10768\n8      7464\n17     7429\n18     5202\n7      3353\n19     3344\n20     2480\n21     1281\n6      1146\n22      770\n23      759\n24      264\n5       215\n25      200\n26      182\n27       81\n29       58\n4        32\n31       31\n28       28\nName: total_lines, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"def preprocess_positional(datas, encoder):\n    #preprocess using sklearn.preprocessing.OneHotEncoder\n    datas = encoder.transform(datas)\n\n    return np.array(datas.toarray())","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.049164Z","iopub.execute_input":"2024-08-15T18:34:24.049427Z","iopub.status.idle":"2024-08-15T18:34:24.058396Z","shell.execute_reply.started":"2024-08-15T18:34:24.049405Z","shell.execute_reply":"2024-08-15T18:34:24.057638Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"line_number_encoder = OneHotEncoder(max_categories=20).fit(train_line_number.reshape(-1,1))\ntrain_line_number_transformed = preprocess_positional(train_line_number.reshape(-1,1), line_number_encoder)\nvalid_line_number_transformed = preprocess_positional(valid_line_number.reshape(-1,1), line_number_encoder)\ntest_line_number_transformed = preprocess_positional(test_line_number.reshape(-1,1), line_number_encoder)\n\ntotal_lines_encoder = OneHotEncoder(max_categories=30).fit(train_total_lines.reshape(-1,1))\ntrain_total_lines_transformed = preprocess_positional(train_total_lines.reshape(-1,1), total_lines_encoder)\nvalid_total_lines_transformed = preprocess_positional(valid_total_lines.reshape(-1,1), total_lines_encoder)\ntest_total_lines_transformed = preprocess_positional(test_total_lines.reshape(-1,1), total_lines_encoder)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.059464Z","iopub.execute_input":"2024-08-15T18:34:24.059720Z","iopub.status.idle":"2024-08-15T18:34:24.244905Z","shell.execute_reply.started":"2024-08-15T18:34:24.059698Z","shell.execute_reply":"2024-08-15T18:34:24.243879Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"inputs_line_number = layers.Input(shape=(20,))\noutputs_line_number = layers.Dense(64, activation='relu')(inputs_line_number)\n\nmodel_line_number = keras.Model(inputs_line_number, outputs_line_number)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.246230Z","iopub.execute_input":"2024-08-15T18:34:24.246549Z","iopub.status.idle":"2024-08-15T18:34:24.269776Z","shell.execute_reply.started":"2024-08-15T18:34:24.246523Z","shell.execute_reply":"2024-08-15T18:34:24.269035Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"inputs_total_lines = layers.Input(shape=(27,))\noutputs_total_lines = layers.Dense(64, activation='relu')(inputs_total_lines)\n\nmodel_total_lines = keras.Model(inputs_total_lines, outputs_total_lines)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.270913Z","iopub.execute_input":"2024-08-15T18:34:24.271267Z","iopub.status.idle":"2024-08-15T18:34:24.291921Z","shell.execute_reply.started":"2024-08-15T18:34:24.271234Z","shell.execute_reply":"2024-08-15T18:34:24.291142Z"},"trusted":true},"execution_count":56,"outputs":[]},{"cell_type":"code","source":"dropout_text_concatenated_layer = layers.Dense(512, activation='relu')(text_concatenated_layer)\ndropout_text_concatenated_layer = layers.Dropout(0.5)(dropout_text_concatenated_layer)\n\nmodel_concatenated_layer = layers.Concatenate()([model_line_number.output, model_total_lines.output, dropout_text_concatenated_layer])","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.292929Z","iopub.execute_input":"2024-08-15T18:34:24.293206Z","iopub.status.idle":"2024-08-15T18:34:24.319609Z","shell.execute_reply.started":"2024-08-15T18:34:24.293167Z","shell.execute_reply":"2024-08-15T18:34:24.318864Z"},"trusted":true},"execution_count":57,"outputs":[]},{"cell_type":"code","source":"# x = layers.Dense(128, activation='relu')(model_concatenated_layer)\n# x = layers.Dropout(0.5)(x)\noutputs = layers.Dense(5, activation='softmax')(model_concatenated_layer)\n\nmodel_5 = keras.Model([model_line_number.input, model_total_lines.input, model_char_embedding.input, model_token_embedding.input], outputs)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.320831Z","iopub.execute_input":"2024-08-15T18:34:24.321511Z","iopub.status.idle":"2024-08-15T18:34:24.343079Z","shell.execute_reply.started":"2024-08-15T18:34:24.321473Z","shell.execute_reply":"2024-08-15T18:34:24.342358Z"},"trusted":true},"execution_count":58,"outputs":[]},{"cell_type":"code","source":"plot_model(model_5, show_shapes=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.344156Z","iopub.execute_input":"2024-08-15T18:34:24.344457Z","iopub.status.idle":"2024-08-15T18:34:24.508879Z","shell.execute_reply.started":"2024-08-15T18:34:24.344432Z","shell.execute_reply":"2024-08-15T18:34:24.507932Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"image/png":"","text/plain":"<IPython.core.display.Image object>"},"metadata":{}}]},{"cell_type":"code","source":"def batch_data(char_data, text_data, line_number_data, total_lines_data, target, batch_size=32):\n    dataset = tf.data.Dataset.from_tensor_slices((((line_number_data, total_lines_data, char_data, text_data), target)))\n    dataset = dataset.shuffle(buffer_size=int(0.1 * len(char_data)))\n    dataset = dataset.batch(batch_size).prefetch(tf.data.AUTOTUNE)\n\n    return dataset","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.510057Z","iopub.execute_input":"2024-08-15T18:34:24.510359Z","iopub.status.idle":"2024-08-15T18:34:24.516849Z","shell.execute_reply.started":"2024-08-15T18:34:24.510334Z","shell.execute_reply":"2024-08-15T18:34:24.515527Z"},"trusted":true},"execution_count":60,"outputs":[]},{"cell_type":"code","source":"train_dataset = batch_data(train_text, train_text, train_line_number_transformed, train_total_lines_transformed, train_target_transformed)\nvalid_dataset = batch_data(valid_text, valid_text, valid_line_number_transformed, valid_total_lines_transformed, valid_target_transformed)\ntest_dataset = batch_data(test_text, test_text, test_line_number_transformed, test_total_lines_transformed, test_target_transformed)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.517991Z","iopub.execute_input":"2024-08-15T18:34:24.518335Z","iopub.status.idle":"2024-08-15T18:34:24.781653Z","shell.execute_reply.started":"2024-08-15T18:34:24.518304Z","shell.execute_reply":"2024-08-15T18:34:24.780875Z"},"trusted":true},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"model_5.compile(loss=keras.losses.CategoricalCrossentropy(label_smoothing=0.2),\n              optimizer=keras.optimizers.Adam(),\n              metrics=['accuracy'])\n\nhistory = model_5.fit(train_dataset,\n                    epochs=10,\n                    steps_per_epoch=int(len(train_dataset)*0.1),\n                    validation_data=valid_dataset,\n                    validation_steps=int(len(valid_dataset)*0.1),\n                    callbacks=[keras.callbacks.EarlyStopping(monitor=\"val_accuracy\", patience=3, restore_best_weights=True)])","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:34:24.782736Z","iopub.execute_input":"2024-08-15T18:34:24.783010Z","iopub.status.idle":"2024-08-15T18:37:54.698292Z","shell.execute_reply.started":"2024-08-15T18:34:24.782987Z","shell.execute_reply":"2024-08-15T18:37:54.697260Z"},"trusted":true},"execution_count":62,"outputs":[{"name":"stdout","text":"Epoch 1/10\n562/562 [==============================] - 34s 41ms/step - loss: 1.0570 - accuracy: 0.7517 - val_loss: 0.9457 - val_accuracy: 0.8358\nEpoch 2/10\n562/562 [==============================] - 19s 33ms/step - loss: 0.9428 - accuracy: 0.8342 - val_loss: 0.9288 - val_accuracy: 0.8481\nEpoch 3/10\n562/562 [==============================] - 19s 33ms/step - loss: 0.9328 - accuracy: 0.8380 - val_loss: 0.9134 - val_accuracy: 0.8537\nEpoch 4/10\n562/562 [==============================] - 18s 33ms/step - loss: 0.9219 - accuracy: 0.8468 - val_loss: 0.9107 - val_accuracy: 0.8418\nEpoch 5/10\n562/562 [==============================] - 18s 31ms/step - loss: 0.9196 - accuracy: 0.8479 - val_loss: 0.9073 - val_accuracy: 0.8494\nEpoch 6/10\n562/562 [==============================] - 19s 33ms/step - loss: 0.9198 - accuracy: 0.8466 - val_loss: 0.9027 - val_accuracy: 0.8580\nEpoch 7/10\n562/562 [==============================] - 17s 31ms/step - loss: 0.9188 - accuracy: 0.8445 - val_loss: 0.9061 - val_accuracy: 0.8521\nEpoch 8/10\n562/562 [==============================] - 18s 31ms/step - loss: 0.9155 - accuracy: 0.8531 - val_loss: 0.9078 - val_accuracy: 0.8511\nEpoch 9/10\n562/562 [==============================] - 20s 35ms/step - loss: 0.9103 - accuracy: 0.8556 - val_loss: 0.8936 - val_accuracy: 0.8654\nEpoch 10/10\n562/562 [==============================] - 17s 31ms/step - loss: 0.9091 - accuracy: 0.8555 - val_loss: 0.8968 - val_accuracy: 0.8580\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Don't shuffle the test data otherwise the get_score function wouldn't work as intended","metadata":{}},{"cell_type":"code","source":"test_dataset = tf.data.Dataset.from_tensor_slices((((test_line_number_transformed, test_total_lines_transformed, test_text, test_text), test_target_transformed)))\ntest_dataset = test_dataset.batch(batch_size).prefetch(tf.data.AUTOTUNE)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:37:54.699497Z","iopub.execute_input":"2024-08-15T18:37:54.699784Z","iopub.status.idle":"2024-08-15T18:37:54.733515Z","shell.execute_reply.started":"2024-08-15T18:37:54.699760Z","shell.execute_reply":"2024-08-15T18:37:54.732547Z"},"trusted":true},"execution_count":63,"outputs":[]},{"cell_type":"code","source":"pred_5 = model_5.predict(test_dataset)\nscore_5 = model_5.evaluate(test_dataset)\n\npred_5 = tf.argmax(pred_5, axis=1)\nget_score(np.argmax(test_target_transformed, axis=-1), pred_5)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:37:54.734828Z","iopub.execute_input":"2024-08-15T18:37:54.735211Z","iopub.status.idle":"2024-08-15T18:38:24.823590Z","shell.execute_reply.started":"2024-08-15T18:37:54.735160Z","shell.execute_reply":"2024-08-15T18:38:24.822664Z"},"trusted":true},"execution_count":64,"outputs":[{"name":"stdout","text":"942/942 [==============================] - 16s 14ms/step\n942/942 [==============================] - 14s 15ms/step - loss: 0.9023 - accuracy: 0.8591\nf1 score: 0.8558843508347086\naccuracy score: 0.8591338974614235\n","output_type":"stream"}]},{"cell_type":"code","source":"def preprocess_input(input_text):\n  texts = input_text.split('. ')\n\n  preprocessed_texts = []\n  preprocessed_line_number = []\n  preprocessed_total_lines = []\n\n  for index, text in enumerate(texts):\n    preprocessed_texts.append(text)\n    preprocessed_line_number.append(index)\n    preprocessed_total_lines.append(len(texts))\n\n  preprocessed_texts = np.array(preprocessed_texts)\n  preprocessed_line_number = np.array(preprocessed_line_number).reshape(-1,1)\n  preprocessed_total_lines = np.array(preprocessed_total_lines).reshape(-1,1)\n\n  preprocessed_line_number = preprocess_positional(preprocessed_line_number, line_number_encoder)\n  preprocessed_total_lines = preprocess_positional(preprocessed_total_lines, total_lines_encoder)\n\n  # input_dataset = tf.data.Dataset.from_tensor_slices(((preprocessed_line_number,\n  #                                                     preprocessed_total_lines,\n  #                                                     preprocessed_texts,\n  #                                                     preprocessed_texts)))\n\n  # input_dataset = input_dataset.batch(32).prefetch(tf.data.AUTOTUNE)\n  input_dataset = (preprocessed_line_number, preprocessed_total_lines, preprocessed_texts, preprocessed_texts)\n  return input_dataset\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:38:24.824683Z","iopub.execute_input":"2024-08-15T18:38:24.824936Z","iopub.status.idle":"2024-08-15T18:38:24.832490Z","shell.execute_reply.started":"2024-08-15T18:38:24.824913Z","shell.execute_reply":"2024-08-15T18:38:24.831655Z"},"trusted":true},"execution_count":65,"outputs":[]},{"cell_type":"code","source":"target_dictionary = {\n    0: 'BACKGROUND',\n    1: 'CONCLUSIONS',\n    2: 'METHODS',\n    3: 'OBJECTIVES',\n    4: 'RESULTS'\n}","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:38:24.833680Z","iopub.execute_input":"2024-08-15T18:38:24.834009Z","iopub.status.idle":"2024-08-15T18:38:24.847989Z","shell.execute_reply.started":"2024-08-15T18:38:24.833978Z","shell.execute_reply":"2024-08-15T18:38:24.847065Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"def make_prediction(input_text):\n  preprocessed_data = preprocess_input(input_text)\n\n  preds = model_5.predict(preprocessed_data)\n  preds = tf.argmax(preds, axis=-1)\n  preds = np.array(preds)\n\n  texts = preprocessed_data[2]\n\n\n  outputs = [[], [], [], [], []]\n  for index, pred in enumerate(preds):\n    outputs[pred].append(texts[index])\n\n  output_order = [0, 3, 2, 4, 1]\n  for order in output_order:\n    print(f\"{target_dictionary[order]}: \")\n    print(' '.join(outputs[order]))\n    print('\\n')\n\n  return np.array(preds)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:38:24.849031Z","iopub.execute_input":"2024-08-15T18:38:24.849297Z","iopub.status.idle":"2024-08-15T18:38:24.862484Z","shell.execute_reply.started":"2024-08-15T18:38:24.849274Z","shell.execute_reply":"2024-08-15T18:38:24.861615Z"},"trusted":true},"execution_count":67,"outputs":[]},{"cell_type":"code","source":"input_text = \"Extensive studies have shown that potassium diformate (KDF), an antibiotic substitute used as a feed additive, improves animal growth performance, although there is less direct evidence of its preventive effect on bacterial infections and its influence on the intestinal flora of animals. In this study, the inhibition effect of KDF on Salmonella enterica serovar Pullorum, an important enteric pathogen causing pullorum disease, was investigated in vitro and on a chicken infection model. The effect of KDF on the diversities and structures of chicken duodenal and cecum flora were also investigated using 16S rRNA gene sequencing. The results showed that addition of 0.5% KDF in feed or 0.1% KDF in drinking water significantly reduced the bacterial loads and the degree of pathological changes in the cecum, improved digestion and reduced the pH of the gastrointestinal tract of chickens infected with S. pullorum. KDF also significantly modified the diversity and abundance of intestinal microflorae in chickens. In particular, it promoted the colonization of several probiotics, such as Bacteroides, Blautia, Ruminococcus_torques_group and Faecalibacteriumm, which are involved in maintenance of the intestinal barrier, modulation of inflammation, energy supply for intestinal cells and pathogen resistance. These results enrich the theoretical basis for the clinical application of KDF in chickens.\"\nmake_prediction(input_text)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:38:24.863601Z","iopub.execute_input":"2024-08-15T18:38:24.863866Z","iopub.status.idle":"2024-08-15T18:38:27.662034Z","shell.execute_reply.started":"2024-08-15T18:38:24.863844Z","shell.execute_reply":"2024-08-15T18:38:27.661096Z"},"trusted":true},"execution_count":68,"outputs":[{"name":"stdout","text":"1/1 [==============================] - 3s 3s/step\nBACKGROUND: \nExtensive studies have shown that potassium diformate (KDF), an antibiotic substitute used as a feed additive, improves animal growth performance, although there is less direct evidence of its preventive effect on bacterial infections and its influence on the intestinal flora of animals In this study, the inhibition effect of KDF on Salmonella enterica serovar Pullorum, an important enteric pathogen causing pullorum disease, was investigated in vitro and on a chicken infection model pullorum\n\n\nOBJECTIVES: \n\n\n\nMETHODS: \nThe effect of KDF on the diversities and structures of chicken duodenal and cecum flora were also investigated using 16S rRNA gene sequencing\n\n\nRESULTS: \nThe results showed that addition of 0.5% KDF in feed or 0.1% KDF in drinking water significantly reduced the bacterial loads and the degree of pathological changes in the cecum, improved digestion and reduced the pH of the gastrointestinal tract of chickens infected with S KDF also significantly modified the diversity and abundance of intestinal microflorae in chickens\n\n\nCONCLUSIONS: \nIn particular, it promoted the colonization of several probiotics, such as Bacteroides, Blautia, Ruminococcus_torques_group and Faecalibacteriumm, which are involved in maintenance of the intestinal barrier, modulation of inflammation, energy supply for intestinal cells and pathogen resistance These results enrich the theoretical basis for the clinical application of KDF in chickens.\n\n\n","output_type":"stream"},{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"array([0, 0, 2, 4, 0, 4, 1, 1])"},"metadata":{}}]},{"cell_type":"code","source":"!mkdir -p saved_model\nmodel_5.save('saved_model/model_5')","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:44:48.852220Z","iopub.execute_input":"2024-08-15T18:44:48.852576Z","iopub.status.idle":"2024-08-15T18:45:21.511882Z","shell.execute_reply.started":"2024-08-15T18:44:48.852542Z","shell.execute_reply":"2024-08-15T18:45:21.510836Z"},"trusted":true},"execution_count":70,"outputs":[]},{"cell_type":"code","source":"!ls saved_model\n\n# Contains an assets folder, saved_model.pb, and variables folder.\n!ls saved_model/model_5","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:46:35.843124Z","iopub.execute_input":"2024-08-15T18:46:35.843514Z","iopub.status.idle":"2024-08-15T18:46:38.058415Z","shell.execute_reply.started":"2024-08-15T18:46:35.843481Z","shell.execute_reply":"2024-08-15T18:46:38.057363Z"},"trusted":true},"execution_count":72,"outputs":[{"name":"stdout","text":"model_5\nassets\tfingerprint.pb\tkeras_metadata.pb  saved_model.pb  variables\n","output_type":"stream"}]},{"cell_type":"code","source":"loaded_model = tf.keras.models.load_model(\"saved_model/model_5\")\nloaded_model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:47:56.529511Z","iopub.execute_input":"2024-08-15T18:47:56.530130Z","iopub.status.idle":"2024-08-15T18:48:15.038759Z","shell.execute_reply.started":"2024-08-15T18:47:56.530102Z","shell.execute_reply":"2024-08-15T18:48:15.037831Z"},"trusted":true},"execution_count":75,"outputs":[{"name":"stdout","text":"Model: \"model_10\"\n__________________________________________________________________________________________________\n Layer (type)                   Output Shape         Param #     Connected to                     \n==================================================================================================\n input_6 (InputLayer)           [(None, 1)]          0           []                               \n                                                                                                  \n text_vectorization_3 (TextVect  (None, 300)         0           ['input_6[0][0]']                \n orization)                                                                                       \n                                                                                                  \n input_7 (InputLayer)           [(None,)]            0           []                               \n                                                                                                  \n embedding_3 (Embedding)        (None, 300, 25)      1800        ['text_vectorization_3[0][0]']   \n                                                                                                  \n keras_layer (KerasLayer)       (None, 512)          256797824   ['input_7[0][0]']                \n                                                                                                  \n bidirectional_1 (Bidirectional  (None, 48)          9600        ['embedding_3[0][0]']            \n )                                                                                                \n                                                                                                  \n dense_8 (Dense)                (None, 256)          131328      ['keras_layer[0][0]']            \n                                                                                                  \n concatenate_1 (Concatenate)    (None, 304)          0           ['bidirectional_1[0][0]',        \n                                                                  'dense_8[0][0]']                \n                                                                                                  \n input_8 (InputLayer)           [(None, 20)]         0           []                               \n                                                                                                  \n input_9 (InputLayer)           [(None, 27)]         0           []                               \n                                                                                                  \n dense_11 (Dense)               (None, 512)          156160      ['concatenate_1[0][0]']          \n                                                                                                  \n dense_9 (Dense)                (None, 64)           1344        ['input_8[0][0]']                \n                                                                                                  \n dense_10 (Dense)               (None, 64)           1792        ['input_9[0][0]']                \n                                                                                                  \n dropout_2 (Dropout)            (None, 512)          0           ['dense_11[0][0]']               \n                                                                                                  \n concatenate_2 (Concatenate)    (None, 640)          0           ['dense_9[0][0]',                \n                                                                  'dense_10[0][0]',               \n                                                                  'dropout_2[0][0]']              \n                                                                                                  \n dense_12 (Dense)               (None, 5)            3205        ['concatenate_2[0][0]']          \n                                                                                                  \n==================================================================================================\nTotal params: 257,103,053\nTrainable params: 305,229\nNon-trainable params: 256,797,824\n__________________________________________________________________________________________________\n","output_type":"stream"}]}]}